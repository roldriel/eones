name: Generate Release Changelog

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  actions: read

jobs:
  changelog:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate tag format
        run: |
          if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag format is invalid. Expected format: v*.*.* (e.g., v1.2.3)"
            exit 1
          fi
          echo "Tag format is valid: ${{ github.ref_name }}"

      - name: Generate changelog
        id: changelog
        uses: orhun/git-cliff-action@v3
        with:
          config: .github/cliff.toml
          args: --latest --strip header
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update CHANGELOG.md
        run: |
          # Obtener la versión sin 'v'
          VERSION=${GITHUB_REF_NAME#v}
          DATE=$(date +"%Y-%m-%d")

          echo "Updating CHANGELOG.md for version $VERSION"

          # Verificar si existe sección [Unreleased]
          if grep -q "## \[Unreleased\]" CHANGELOG.md; then
            # Crear backup del changelog
            cp CHANGELOG.md CHANGELOG.md.bak

            # Reemplazar [Unreleased] con la nueva versión
            sed -i "s/## \[Unreleased\]/## [$VERSION] - $DATE/" CHANGELOG.md
            sed -i "s/### Cambios desde v.*/### Changes in this version/" CHANGELOG.md

            # Verificar si hubo cambios
            if ! diff -q CHANGELOG.md CHANGELOG.md.bak > /dev/null; then
              echo "CHANGELOG.md updated successfully"

              # Commit y push los cambios
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add CHANGELOG.md
              git commit -m "docs: update CHANGELOG.md for release $VERSION"
              git push origin HEAD:master
            else
              echo "No changes detected in CHANGELOG.md"
            fi

            # Limpiar backup
            rm -f CHANGELOG.md.bak
          else
            echo "No [Unreleased] section found in CHANGELOG.md"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.content }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
