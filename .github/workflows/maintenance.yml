name: Maintenance

on:
  schedule:
    # Ejecutar cada lunes a las 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      task:
        description: 'Maintenance task to run'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'dependencies'
          - 'stale-issues'
          - 'security-audit'
          - 'cleanup'

env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1

jobs:
  # Actualización de dependencias
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-22.04
    permissions: {}
    if: github.event.inputs.task == 'dependencies' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    timeout-minutes: 20
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Python Environment
        uses: ./.github/actions/setup-python
        with:
          python-version: '3.11'
          cache-key-suffix: maintenance
          extra-deps: 'pip-tools pip-audit'

      - name: Check for dependency updates
        id: deps
        run: |
          echo "🔍 Checking for dependency updates..."
          
          # Verificar si hay actualizaciones disponibles
          pip list --outdated --format=json > outdated.json
          OUTDATED_COUNT=$(jq length outdated.json)
          
          if [[ $OUTDATED_COUNT -gt 0 ]]; then
            echo "📦 Found $OUTDATED_COUNT outdated packages"
            echo "has-updates=true" >> $GITHUB_OUTPUT
            
            echo "📋 Outdated packages:"
            jq -r '.[] | "  - \(.name): \(.version) → \(.latest_version)"' outdated.json
          else
            echo "✅ All packages are up to date"
            echo "has-updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Run security audit
        run: |
          echo "🛡️ Running security audit..."
          pip-audit --format=json --output=security-audit.json || true
          pip-audit

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: maintenance-security-audit
          path: |
            outdated.json
            security-audit.json
          retention-days: 30

      - name: Create dependency update issue
        if: steps.deps.outputs.has-updates == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const outdated = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));
            
            const body = `## 📦 Dependency Updates Available
            
            This issue was automatically created by the maintenance workflow.
            
            ### Outdated Packages
            
            ${outdated.map(pkg => `- **${pkg.name}**: ${pkg.version} → ${pkg.latest_version}`).join('\n')}
            
            ### Next Steps
            
            1. Review the changes in each package
            2. Test compatibility with the current codebase
            3. Update dependencies in pyproject.toml
            4. Run tests to ensure everything works
            
            ### Security Audit
            
            A security audit has been run and results are available in the workflow artifacts.
            
            ---
            *This issue will be automatically closed when dependencies are updated.*`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔄 Dependency Updates Available (${new Date().toISOString().split('T')[0]})`,
              body: body,
              labels: ['dependencies', 'maintenance', 'automated']
            });

  # Gestión de issues y PRs obsoletos
  stale-management:
    name: Stale Issues Management
    runs-on: ubuntu-22.04
    permissions: {}
    if: github.event.inputs.task == 'stale-issues' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    timeout-minutes: 10
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Close stale issues and PRs
        uses: actions/stale@v9
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          stale-issue-message: |
            👋 Este issue ha estado inactivo por 60 días y será cerrado en 7 días si no hay actividad.
            
            Si este issue sigue siendo relevante, por favor comenta para mantenerlo abierto.
            
            ---
            *Este mensaje fue generado automáticamente por el bot de mantenimiento.*
          stale-pr-message: |
            👋 Este PR ha estado inactivo por 30 días y será cerrado en 7 días si no hay actividad.
            
            Si este PR sigue siendo relevante, por favor actualízalo o comenta para mantenerlo abierto.
            
            ---
            *Este mensaje fue generado automáticamente por el bot de mantenimiento.*
          close-issue-message: |
            🔒 Este issue ha sido cerrado automáticamente debido a inactividad.
            
            Si necesitas reabrir este issue, por favor crea uno nuevo con información actualizada.
          close-pr-message: |
            🔒 Este PR ha sido cerrado automáticamente debido a inactividad.
            
            Si quieres continuar con estos cambios, por favor crea un nuevo PR.
          days-before-stale: 60
          days-before-close: 7
          days-before-pr-stale: 30
          days-before-pr-close: 7
          stale-issue-label: 'stale'
          stale-pr-label: 'stale'
          exempt-issue-labels: 'pinned,security,bug'
          exempt-pr-labels: 'pinned,security,work-in-progress'

  # Limpieza de artifacts y cache
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-22.04
    permissions: {}
    if: github.event.inputs.task == 'cleanup' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    timeout-minutes: 10
    permissions:
      actions: write
    steps:
      - name: Delete old workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            // Mantener solo los últimos 50 runs exitosos y 20 fallidos
            const successfulRuns = runs.workflow_runs.filter(run => run.conclusion === 'success').slice(50);
            const failedRuns = runs.workflow_runs.filter(run => run.conclusion === 'failure').slice(20);
            const runsToDelete = [...successfulRuns, ...failedRuns];
            
            console.log(`🗑️ Deleting ${runsToDelete.length} old workflow runs...`);
            
            for (const run of runsToDelete) {
              try {
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
                console.log(`✅ Deleted run ${run.id} (${run.name})`);
              } catch (error) {
                console.log(`❌ Failed to delete run ${run.id}: ${error.message}`);
              }
            }

      - name: Clear package cache
        run: |
          echo "🧹 Clearing package caches..."
          # Esto se ejecuta en el runner, no afecta el cache de GitHub Actions
          pip cache purge || true
          echo "✅ Cache cleared"

  # Auditoría de seguridad completa
  security-audit:
    name: Security Audit
    runs-on: ubuntu-22.04
    permissions: {}
    if: github.event.inputs.task == 'security-audit' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    timeout-minutes: 15
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Run comprehensive security scan
        uses: ./.github/actions/security-scan
        with:
          python-version: '3.11'
          source-path: 'src/'
          fail-on-error: false
          upload-results: true

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:python'

      - name: Upload security results to GitHub Security
        run: |
          echo "🔒 Security scan completed"
          echo "📊 Results uploaded to GitHub Security tab"

  # Resumen de mantenimiento
  maintenance-summary:
    name: Maintenance Summary
    runs-on: ubuntu-22.04
    permissions: {}
    needs: [update-dependencies, stale-management, cleanup, security-audit]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "🔧 Maintenance Summary - $(date)"
          echo "================================"
          echo "📋 Tasks completed:"
          echo "  - Dependencies: ${{ needs.update-dependencies.result }}"
          echo "  - Stale Management: ${{ needs.stale-management.result }}"
          echo "  - Cleanup: ${{ needs.cleanup.result }}"
          echo "  - Security Audit: ${{ needs.security-audit.result }}"
          echo ""
          echo "✅ Maintenance workflow completed"
          echo "📅 Next scheduled run: $(date -d 'next monday 9:00' '+%Y-%m-%d %H:%M UTC')"
